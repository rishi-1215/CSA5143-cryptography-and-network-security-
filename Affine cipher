#include <stdio.h>
#include <string.h>
#include <ctype.h>

// Function to find the modular multiplicative inverse of a (mod m)
int mod_inverse(int a, int m) {
    a = a % m;
    for (int x = 1; x < m; x++) {
        if ((a * x) % m == 1) {
            return x;
        }
    }
    return -1; // Modular inverse does not exist
}

// Function to decrypt using the affine cipher
char decrypt_affine_caesar(char cipher_char, int a, int b) {
    if (isalpha(cipher_char)) {
        char base = islower(cipher_char) ? 'a' : 'A';
        int inv_a = mod_inverse(a, 26);
        if (inv_a != -1) {
            return (inv_a * ((cipher_char - base) - b + 26)) % 26 + base;
        }
    }
    return cipher_char;
}

int main() {
    char ciphertext[] = "BUBUBUBUBUBUBUBUBUBUBUBUBU"; // Example ciphertext
    int freq[26] = {0};

    // Count frequencies of letters in the ciphertext
    for (int i = 0; ciphertext[i] != '\0'; i++) {
        if (isalpha(ciphertext[i])) {
            freq[tolower(ciphertext[i]) - 'a']++;
        }
    }

    // Find the most frequent and second most frequent letters
    int max_freq_index = 0, second_max_freq_index = 0;
    for (int i = 0; i < 26; i++) {
        if (freq[i] > freq[max_freq_index]) {
            second_max_freq_index = max_freq_index;
            max_freq_index = i;
        } else if (freq[i] > freq[second_max_freq_index] && i != max_freq_index) {
            second_max_freq_index = i;
        }
    }

    // Determine the key using the most frequent and second most frequent letters
    int a = (second_max_freq_index - max_freq_index + 26) % 26;
    int b = (ciphertext[0] - 'A' - ('E' - 'A') * a + 26) % 26;

    // Decrypt the ciphertext using the determined key
    printf("Decrypted plaintext: ");
    for (int i = 0; ciphertext[i] != '\0'; i++) {
        printf("%c", decrypt_affine_caesar(ciphertext[i], a, b));
    }
    printf("\n");

    return 0;
}
