#include <stdio.h>
#include <string.h>

#define SIZE 5

void prepareKey(char key[], char matrix[][SIZE]) {
    int i, j, k;
    char temp[26] = {0};
    char alphabet[] = "ABCDEFGHIKLMNOPQRSTUVWXYZ";

    // Fill the key
    for(i = 0; i < strlen(key); ++i) {
        if(key[i] != 'J')
            temp[key[i] - 'A'] = 1;
    }

    // Fill the remaining characters
    k = 0;
    for(i = 0; i < 26; ++i) {
        if(temp[i] != 1) {
            key[strlen(key)] = alphabet[i];
            ++k;
        }
        if(k == (26 - strlen(key)))
            break;
    }

    // Construct the matrix
    k = 0;
    for(i = 0; i < SIZE; ++i) {
        for(j = 0; j < SIZE; ++j) {
            matrix[i][j] = key[k++];
        }
    }
}

void findPosition(char matrix[][SIZE], char letter, int *row, int *col) {
    int i, j;

    for(i = 0; i < SIZE; ++i) {
        for(j = 0; j < SIZE; ++j) {
            if(matrix[i][j] == letter) {
                *row = i;
                *col = j;
                return;
            }
        }
    }
}

void encrypt(char matrix[][SIZE], char plaintext[], char ciphertext[]) {
    int i, row1, col1, row2, col2;

    for(i = 0; i < strlen(plaintext); i += 2) {
        findPosition(matrix, plaintext[i], &row1, &col1);
        findPosition(matrix, plaintext[i + 1], &row2, &col2);

        if(row1 == row2) {
            ciphertext[i] = matrix[row1][(col1 + 1) % SIZE];
            ciphertext[i + 1] = matrix[row2][(col2 + 1) % SIZE];
        } else if(col1 == col2) {
            ciphertext[i] = matrix[(row1 + 1) % SIZE][col1];
            ciphertext[i + 1] = matrix[(row2 + 1) % SIZE][col2];
        } else {
            ciphertext[i] = matrix[row1][col2];
            ciphertext[i + 1] = matrix[row2][col1];
        }
    }
    ciphertext[i] = '\0';
}

int main() {
    char key[26];
    char matrix[SIZE][SIZE];
    char plaintext[100], ciphertext[100];

    printf("Enter keyword: ");
    fgets(key, sizeof(key), stdin);

    printf("Enter plaintext: ");
    fgets(plaintext, sizeof(plaintext), stdin);

    // Remove newlines
    key[strcspn(key, "\n")] = '\0';
    plaintext[strcspn(plaintext, "\n")] = '\0';

    prepareKey(key, matrix);
    encrypt(matrix, plaintext, ciphertext);

    printf("Ciphertext: %s\n", ciphertext);

    return 0;
}
